AWSTemplateFormatVersion: '2010-09-09'
Description: Backend Spring Boot API ECS Deployment

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
  ContainerImage:
    Type: String
  ContainerPort:
    Type: Number
    Default: 8080

Resources:

  BackendTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess

  BackendTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: fondos-api-task
      RequiresCompatibilities: [FARGATE]
      Cpu: 512
      Memory: 1024
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt BackendTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: fondos-api
          Image: !Ref ContainerImage
          PortMappings:
            - ContainerPort: !Ref ContainerPort
          Environment:
            - Name: SPRING_PROFILES_ACTIVE
              Value: prod

  BackendServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP traffic
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0

  BackendCluster:
    Type: AWS::ECS::Cluster

  BackendService:
    Type: AWS::ECS::Service
    DependsOn: BackendListenerRule
    Properties:
      Cluster: !Ref BackendCluster
      LaunchType: FARGATE
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets: !Ref Subnets
          SecurityGroups: [!Ref BackendServiceSecurityGroup]
      TaskDefinition: !Ref BackendTaskDefinition
      LoadBalancers:
        - ContainerName: fondos-api
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref BackendTargetGroup

  BackendLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets: !Ref Subnets
      SecurityGroups: [!Ref BackendServiceSecurityGroup]
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'

  BackendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VpcId
      Protocol: HTTP
      Port: 8080
      TargetType: ip

  BackendListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref BackendTargetGroup
      LoadBalancerArn: !Ref BackendLoadBalancer
      Port: 80
      Protocol: HTTP

  BackendListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref BackendTargetGroup
      Conditions:
        - Field: path-pattern
          Values: ["/*"]
      ListenerArn: !Ref BackendListener
      Priority: 1

Outputs:
  BackendServiceURL:
    Description: URL p√∫blico de la API backend
    Value: !GetAtt BackendLoadBalancer.DNSName
